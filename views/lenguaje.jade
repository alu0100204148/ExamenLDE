//- test.jade
extends ./layout.jade

block meta
  script(type='text/x-mathjax-config').
    MathJax.Hub.Config({
      extensions: ["tex2jax.js"],
      jax: ["input/TeX", "output/HTML-CSS"],
      tex2jax: {
        inlineMath: [ ['$','$'], ["\\(","\\)"] ],
        displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
        processEscapes: true
      },
      "HTML-CSS": { availableFonts: ["TeX"] }
    });
  script(type='text/javascript', src='http://cdn.mathjax.org/mathjax/latest/MathJax.js')
  script(src='/javascripts/main.js')

block style
  link(href='http://code.jquery.com/ui/1.9.1/themes/base/jquery-ui.css', media='screen, projection', rel='stylesheet')

block title
  title Lenguaje - Generador de Ex√°menes

block nav
  li.s3
    a(href='/', title='Home') Home
  li.s3
    a(href='./test', title='Tests del analizador') Tests
  li.s3
    a.current(href='/lenguaje', title='Lenguaje') Lenguaje
  li
    a(href='/contributors', title='Colaboradores') Colaboradores

block content
  #content
    section
      br
    | Recuerde que un PEG $G$ es una cuaterna $G =(\Sigma,V,P,S)$.
    ol
      li $\Sigma$ es el conjunto de terminales.
      li
        | $V$ es un conjunto (disjunto de $\Sigma$) que se denomina conjunto de 
        i s&iacute;mbolos no terminales
        | ,
        |       
        i variables sint&aacute;cticas
        |  o 
        i categor&iacute;as gram&aacute;ticales
        | ,
      li
        | $P$ es un conjunto de pares de $V \times (V \cup \Sigma )^*$. En vez de escribir
        | un par usando la notaci&oacute;n $(A, \alpha) \in P$ se escribe $A \leftarrow \alpha$.
        | Un elemento de $P$ se denomina 
        i regla de an&aacute;lisis
        | .
      li
        | Por &uacute;ltimo, $S$ es un s&iacute;mbolo del conjunto
        | $V$ que se denomina 
        i expresi&oacute;n de arranque
        | .
    ol
      li $\Sigma = \{ =, +, -, *, /, (, ), 0 \ldots 9 \}$,
      li
        | $V = \{ program, block, constants, identificators, arguments, process, st, cond, exp, term, factor \} \cup$ 
        br
        |   $\{ASSIGN, ADD, MUL, LEFTPAR, RIGHTPAR, COLON, SEMICOLON, DOT, COMMA, COMPARISON \} \cup$ 
        br
        |   $\{ID, NUMBER, IF, THEN, ELSE, PROCEDURE, BEGIN, END, WHILE, DO, CALL, P, ODD, CONST, VAR, \_ \}$
      li
        | Reglas de an&aacute;lisis:
        ol
          pre.
            \nprogram        = (block)+ DOT 
            
            block          = CONST (constants)+ SEMICOLON 
                           / VAR (identificators)+ SEMICOLON 
                           / (process)* st 
            
            constants      = COMMA ID ASSIGN NUMBER 
                           / ID ASSIGN NUMBER 
                     
            identificators = COMMA ID 
                           / ID 
            
            arguments      = COMMA ID 
                           / ID 
                     
            process        = PROCEDURE ID LEFTPAR (arguments)+ RIGHTPAR SEMICOLON block SEMICOLON
                           / PROCEDURE ID SEMICOLON block SEMICOLON  
                  
            st             = ID ASSIGN exp SEMICOLON      
                           / ID ASSIGN exp    
                           / IF cond THEN st ELSE st  
                           / IF THEN st  
                           / CALL ID LEFTPAR (identificators)+ RIGHTPAR
                           / CALL ID
                           / P exp  
                           / WHILE cond DO st  
                           / BEGIN st END 
            
            cond           = ODD exp  
                           / exp COMPARISON exp  
            
            exp            = term (ADD term)*   
            
            term           = factor (MUL factor)* 
            
            factor         = NUMBER
                           / ID
                           / LEFTPAR exp RIGHTPAR   
            
            
            
            _ = $[ \t\n\r]*
            
            ASSIGN     = _ op:'=' _
                       / _ op:':=' _ 
            ADD        = _ op:[+-] _ 
            MUL        = _ op:[*/] _ 
            COMPARISON = _ op:[<>=!][=] _ 
                       / _ op:[<>] _ 
            ID         = _ id:$([a-zA-Z_][a-zA-Z_0-9]*) _         
            NUMBER     = _ digits:$[0-9]+ _ 
                
            
            DOT        = _ "." _
            SEMICOLON  = _ ";" _
            COMMA      = _ "," _
            LEFTPAR    = _"("_
            RIGHTPAR   = _")"_
            IF         = _ "if" _   
            THEN       = _ "then" _
            ELSE       = _ "else" _
            CALL       = _ "call" _
            P          = _ "p" _
            ODD        = _ "odd" _
            WHILE      = _ "while" _
            DO         = _ "do" _
            BEGIN      = _ "begin" _
            END        = _ "end" _
            CONST      = _ "const" _
            VAR        = _ "var" _
            PROCEDURE  = _ "procedure" _
            
                              
      li Expresi&oacute;n de arranque: $program$
    br
    br
    br
